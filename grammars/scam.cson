'scopeName': 'source.scam'
'name': 'SCAM'
'fileTypes': ['SCM']
'patterns': [
  {
    'match': '\\b(println|true\\?|error\\?|print|inspect|length|string\\+|abs|null\\?|eq\\?|sqrt|reverse|is\\?|level\\?|ppTable|lambda|member\\?|cadr|car|cons|caar|caddr|cdr|type|apply|map|get)[ |\\n]?'
    'name': 'support.function'
  },
  {
    'match': '(?<=\\()(if|and|or|\\<|\\||\\=|\\=\\=|\\<\\=|for|for\\-each|while|catch|cond|else)[ \\n]'
    'name': 'keyword.control'
  },
  {
    'match': '\\b(define|(set\!)|list)(?!\\-)'
    'name': 'storage'
  },
  {
    'match': '[\\(\\)]|(\\\'\\w*)'
    'name': 'entity.name.tag'
  },
  {
    'match': '(\\".*\\")'
    'name': 'string'
  },
  {
    'match':'(?<=define \\()(\\w|\\d|[\\-*>?])*'
    'name':'entity.name.function'
  },
  {
    # looks for "define ("
    'begin': 'define \\((\\w|\\d|[\\-])*'
    'end': '\\)'
    'patterns':[
      {
        'name':'variable.parameter'
        'match': '[a-zA-Z0-9?#]+'
      }
    ]
  },
  {
    'begin': 'lambda[ ]?\\('
    'end': '\\)'
    'patterns':[
      {
        'name':'variable.parameter'
        'match': '[a-zA-Z0-9?#]+'
      }
    ]
  },
  {
    'match': '((;).*)'
    'name': 'comment'
  },
  {
    'begin': '(;{).*'
    'end': ';}'
    'name':'comment.block'
  },
  {
    'match': '(?<=\\()[\\+\\-\\*]'
    'name': 'keyword.operator'
  },
  {
    'comment bad operation'
    'match': '(\\w|\\d|[\\$\\#])+ [\\+|\\-|\\*|\\=|\\<|\\>] (\\w|\\d|[\\$\\#])+'
    'name': 'invalid.illegal'
  },
  {
    'match': '(?<!lambda \\()(?<!lambda\\()(?<=\\()\\w(\\w|\\d|[\\->*?#!])*[ ]?'
    'name': 'entity.name.function'
  },
  {
    'match': '\\d+'
    'name': 'constant.numeric'
  },
  {
    'match':'\\b(nil|this|\\@|\\#)'
    'name':'keyword'
  }
]
